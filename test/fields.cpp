//---------------------------------------------------------------------------//
// Copyright (c) 2020 Mikhail Komarov <nemo@nil.foundation>
// Copyright (c) 2020 Nikita Kaskov <nbering@nil.foundation>
// Copyright (c) 2020 Ilias Khairullin <ilias@nil.foundation>
//
// MIT License
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.
//---------------------------------------------------------------------------//

#define BOOST_TEST_MODULE fields_algebra_test

#include <iostream>
#include <cstdint>
#include <string>

// #include <boost/multiprecision/cpp_modular.hpp>
// #include <boost/multiprecision/number.hpp>
// #include <boost/multiprecision/cpp_int.hpp>
// #include <boost/multiprecision/modular/modular_adaptor.hpp>

#include <boost/test/unit_test.hpp>
#include <boost/test/data/test_case.hpp>
#include <boost/test/data/monomorphic.hpp>

#include <boost/property_tree/ptree.hpp>
#include <boost/property_tree/json_parser.hpp>

#include <nil/crypto3/algebra/fields/fp2.hpp>

// #include <nil/crypto3/algebra/fields/bn128/base_field.hpp>
// #include <nil/crypto3/algebra/fields/bn128/scalar_field.hpp>
#include <nil/crypto3/algebra/fields/bls12/base_field.hpp>
#include <nil/crypto3/algebra/fields/bls12/scalar_field.hpp>
// #include <nil/crypto3/algebra/fields/dsa_botan.hpp>
// #include <nil/crypto3/algebra/fields/dsa_jce.hpp>
// #include <nil/crypto3/algebra/fields/ed25519_fe.hpp>
// #include <nil/crypto3/algebra/fields/ffdhe_ietf.hpp>
// #include <nil/crypto3/algebra/fields/field.hpp>
// #include <nil/crypto3/algebra/fields/modp_ietf.hpp>
// #include <nil/crypto3/algebra/fields/modp_srp.hpp>

#include <nil/crypto3/algebra/fields/detail/element/fp.hpp>
#include <nil/crypto3/algebra/fields/detail/element/fp2.hpp>

using namespace nil::crypto3::algebra;

template<typename FieldParams>
void print_field_element(std::ostream &os, const typename fields::detail::element_fp<FieldParams> &e) {
    os << e.data << std::endl;
}

template<typename FieldParams>
void print_field_element(std::ostream &os, const typename fields::detail::element_fp2<FieldParams> &e) {
    os << e.data[0].data << " " << e.data[1].data << std::endl;
}

namespace boost {
    namespace test_tools {
        namespace tt_detail {
            template<typename FieldParams>
            struct print_log_value<typename fields::detail::element_fp<FieldParams>> {
                void operator()(std::ostream &os, typename fields::detail::element_fp<FieldParams> const &e) {
                    print_field_element(os, e);
                }
            };

            template<typename FieldParams>
            struct print_log_value<typename fields::detail::element_fp2<FieldParams>> {
                void operator()(std::ostream &os, typename fields::detail::element_fp2<FieldParams> const &e) {
                    print_field_element(os, e);
                }
            };

            template<template<typename, typename> class P, typename K, typename V>
            struct print_log_value<P<K, V>> {
                void operator()(std::ostream &, P<K, V> const &) {
                }
            };
        }    // namespace tt_detail
    }        // namespace test_tools
}    // namespace boost

typedef int64_t constant_type;
enum field_operation_test_constants : std::size_t { C1 };

enum field_operation_test_elements : std::size_t {
    e1,
    e2,
    e1_plus_e2,
    e1_minus_e2,
    e1_mul_e2,
    e1_dbl,
    e2_inv,
    e1_pow_C1,
    e2_pow_2,
    e2_pow_2_sqrt
};

// if target == check-algebra just data/fields.json
const char *test_data = "../../../../libs/algebra/test/data/fields.json";

boost::property_tree::ptree string_data(std::string test_name) {
    boost::property_tree::ptree string_data;
    boost::property_tree::read_json(test_data, string_data);

    return string_data.get_child(test_name);
}

template<typename element_type>
void check_field_operations(const std::vector<element_type> &elements, const std::vector<constant_type> &constants) {
    BOOST_CHECK_EQUAL(elements[e1] + elements[e2], elements[e1_plus_e2]);
    BOOST_CHECK_EQUAL(elements[e1] - elements[e2], elements[e1_minus_e2]);
    BOOST_CHECK_EQUAL(elements[e1] * elements[e2], elements[e1_mul_e2]);
    BOOST_CHECK_EQUAL(elements[e1].doubled(), elements[e1_dbl]);
    BOOST_CHECK_EQUAL(elements[e2].inversed(), elements[e2_inv]);
    BOOST_CHECK_EQUAL(elements[e1].pow(constants[C1]), elements[e1_pow_C1]);
    BOOST_CHECK_EQUAL(elements[e2].squared(), elements[e2_pow_2]);
    BOOST_CHECK_EQUAL((elements[e2].squared()).sqrt(), elements[e2_pow_2_sqrt]);
}

template<typename FieldParams, typename TestSet>
void field_test_init(std::vector<typename fields::detail::element_fp<FieldParams>> &elements,
                     std::vector<constant_type> &constants,
                     const TestSet &test_set) {
    using element_type = typename fields::detail::element_fp<FieldParams>;

    for (auto &element : test_set.second.get_child("elements_values")) {
        elements.emplace_back(element_type(typename element_type::modulus_type(element.second.data())));
    }

    for (auto &constant : test_set.second.get_child("constants")) {
        constants.emplace_back(std::stoll(constant.second.data()));
    }
}

template<typename FieldParams, typename TestSet>
void field_test_init(std::vector<typename fields::detail::element_fp2<FieldParams>> &elements,
                     std::vector<constant_type> &constants,
                     const TestSet &test_set) {
    using element_type = typename fields::detail::element_fp2<FieldParams>;
    using modulus_type = typename element_type::underlying_type::modulus_type;

    std::array<modulus_type, 2> element_values;

    for (auto &element : test_set.second.get_child("elements_values")) {
        auto i = 0;
        for (auto &element_value : element.second) {
            element_values[i++] = modulus_type(element_value.second.data());
        }
        elements.emplace_back(element_type(element_values[0], element_values[1]));
    }

    for (auto &constant : test_set.second.get_child("constants")) {
        constants.emplace_back(std::stoll(constant.second.data()));
    }
}

template<typename FieldType, typename TestSet>
void field_operation_test(const TestSet &test_set) {
    std::vector<typename FieldType::value_type> elements;
    std::vector<constant_type> constants;

    field_test_init(elements, constants, test_set);

    check_field_operations(elements, constants);
}

template<typename FieldType>
void field_not_square_test(const std::vector<const char *> &test_set) {
    using value_type = typename FieldType::value_type;
    using modulus_type = typename value_type::modulus_type;

    for (auto &not_square : test_set) {
        BOOST_CHECK_EQUAL(value_type(modulus_type(not_square)).is_square(), false);
        BOOST_CHECK_EQUAL(value_type(modulus_type(not_square)).pow(2).is_square(), true);
    }
}

template<typename FieldType>
void field_not_square_test(const std::vector<std::array<const char *, 2>> &test_set) {
    using value_type = typename FieldType::value_type;
    using modulus_type = typename value_type::underlying_type::modulus_type;

    for (auto &not_square : test_set) {
        BOOST_CHECK_EQUAL(value_type(modulus_type(not_square[0]), modulus_type(not_square[1])).is_square(), false);
        BOOST_CHECK_EQUAL(value_type(modulus_type(not_square[0]), modulus_type(not_square[1])).pow(2).is_square(), true);
    }
}

BOOST_AUTO_TEST_SUITE(fields_manual_tests)

    BOOST_DATA_TEST_CASE(field_operation_test_bls12_381_fr, string_data("field_operation_test_bls12_381_fr"), data_set) {
        using policy_type = fields::bls12_fr<381>;

        field_operation_test<policy_type>(data_set);
    }

    BOOST_DATA_TEST_CASE(field_operation_test_bls12_381_fq, string_data("field_operation_test_bls12_381_fq"), data_set) {
        using policy_type = fields::bls12_fq<381>;

        field_operation_test<policy_type>(data_set);
    }

    BOOST_DATA_TEST_CASE(field_operation_test_bls12_381_fq2, string_data("field_operation_test_bls12_381_fq2"), data_set) {
        using policy_type = fields::fp2<fields::bls12_fq<381>>;

        field_operation_test<policy_type>(data_set);
    }

    BOOST_AUTO_TEST_CASE(field_not_square_manual_test_bls12_381_fq) {
        using policy_type = fields::bls12_fq<381>;

        std::vector<const char *> not_squares = {"1479805229384897220734058892433504052051014337468641965318739051059432192873478969566959879543698326154149343333408", "397120792669206923466748196885321685663782579961037807063066126427096809933382188869103458587415432170744385436176", "3043773263706735201664671973278831080331345303560184221659048483448718507755297629159779565113631049359174515383291", "3364881356123821621451787041207679990298078699582019298186723568948542914606265896552136204057148802077569211456496", "90453611832741537854770256822623373768287133316099138215773567220972778314373782679776769559310649835872302232417", "2749914038742253765156314293864387693930030761889110356417321953936425029792584826527670098379980070456356707442024", "3091004086830393150999932359036368316900353172236725606473558775106305838530473185114266458012797575056023842020856", "2145436857818360766582151140974130558358028780279130802960161538441600853901652928417489842793242857431048901879630", "1362472877309014249023135278988068243823630104147983983252423219268262246015733763837356083003277751232097229486539", "1013249631576814332126658630930300704922370218732886682923822893527928042078486771304456670399175721578402073421784", "2453734597587246005288743463501877424447529178013563307972556989232991700031747103455965755718377673929107487960733", "3214537802441209350571789446866209716528863056153297974837650123778318213541245846555970872460871735811261585591943", "3169135778790051452549045488607401080356818642337824842714906017591717986136256613969331692495289771145428731440142", "3562034316891358081675268743705980723577823824950950570849122004111860123740450173026709141229987057854340627583020", "3182370933580217881816194644873010222770258773674211377324177318946086185055816286548311628785294805019213660959978", "1642332220061154092619020599614029174971807679094938761343097857515121499985232054964013159856821635815474987609568", "236144226154356978673580561689222000956809501621241162400672804470843431683002197564321414361718008756405222409124", "3543917190862983524381342386905537877043267477475988835298994940369379104256026551456289306726983548430232555382440", "1570378835452123749673255403896277598345367371628556643555017394656115974930938505784584525997537035334532032365197", "120497217585793664410642327906873933137550674689229375279629169335313720390113180032989420655234477849847117644077", "660752617914715252891611573606406174336818538161262949543102799541691252404304219688135559183928649312076334459610", "268290208057157723267439340988583021537213456922584576916191405691422996932590601984685910345030419222260528145380", "981545449657907009446369565060809039464083863224818824876384713266458209979409973166687823701362454283205235252408", "3638589498050003208368027888519816458687024961557742437245246121005492700190614739610412095154020014367901108486749", "3171563814296665378744802205115736515224346462199506282348870575519287813276029738858618227319328974416466839078835", "1013455829761502676984389267090450553199855020187065344804970106259729952855883692904198042123665532746245830217321", "2198144015811061811882619530510706091531011572876309769623059929616632957251923464948069535195632013338386490561341", "2489115480912191254501712306031387463821349803827728279689399760301215914365794583662707222793608783443693699847793", "296267357285319166639262380473814250877833515257295454651413335444007266062335030101971238670086390331150356798061", "2233925605246231845310989537269257515374740979787207931537220014913657262578255506611951498232939379422149961306689", "3447149586237799357105926959358482035466260622085831983134276473792442772045872151397334198150809945366450516989392", "1326784723271151622952568891680126405551206325816962079034440606062129158367901025000256821353911330326827678784769", "71928479018445016789360257233564660912013612760874327636764802295463755455521586049864970466549523176740659801311", "2637639594768893697308565542454072120385876887477677854241462261003910196239445164508877604763260836929942179238317", "1335259117430436447146565037277590784268136921878373272637264573752425752264111105526854802323499052494248104896117", "1675901949295482622087495269914508881103566438681295358366313404947120151500227340400453887611683207988075195402850", "2143980007024716806592206302937274789379058403277883873681708676634777848122335147597184321341901534315777766633334", "1587541353096331857532049658579609162465480350194526061582963778034761719921529254249862593768076905362984092180319", "2452701156878807307712679216198960181579560767593457990798894251734934220830118958940198538877781067138825449142453", "827224642503017433162741904764897097335073948985237501834603039291923049299291343419585091292143080313360961219416", "1346979516848287554115823480166973158342729939726733476803158681607936562101094306188566462636957592723225988553661", "2095151224290318256725516668122511753312516072825165994357336558836096385811054886302288447732623968490022585279390", "2711971310558451216837446628521229356162255831901050810919069617363059477070451351120972924525399027459895539539673", "3217707243082042377755533584417926900735920245021325940094797386000428431537768481907367761876618264960357863941941", "391607651249012595821418684538255599089900402420344130302716482391226477802702212732294119761766147078291879561376", "3667706977736926142946493148178705442440224238165736265724107311809449129657859959264746718686173140487626095660134", "726213638866864927413884970041140525650127212416090577008790428885887520933302725815345340869776060700388229340357", "2655574054188550362425094743968441905318882785609038711436738391913227318260848346905837745711969129821622204061716", "3336322134501148303904449535903765852551585260599337014804213213325026726142525351537135864279774554861674975743591", "616508303470449279810035608707070322537881964449219423045416698640008519187358366071759842831625767698811848410577", "1552324447003366589282095958307858172077458272528901694930925778698027096220963804449472374764907677343543623724417", "3607878193954831888157909260823768372237108840650264950816592365964635859835423640560309701777887092857127106175699", "2858122102694288218956608042684459373431331084357389370796377852533200258456103384369839916405328481552319276311184", "1772340683767148150800327224667769080695518930759050778367753060721045965374058201484521988895181176409481965469230", "373658588612304785383755949482281905294365914957096997662335676079854287634616718709682444987487650572406560721356", "2325855792009225112661691038759690705491307267864004231266183309914518084363239288888302042595281888469431068955962", "2547790774408370431493748331633960638038719086310869117726242196003399389000535796662712163675733653819253249748110", "2007539554445020073228751036406015140659223008191230536822053997950553583726430015579138688721058765400154716803640", "805985569229933904174232936426407129975378160156443427260657548643097500840565367705874889476631920418231997439407", "1018272303094203977469400963660873411762560028598447789228978914793503618300503826124568542952656787717104667790324", "1782730803624734514196384544755881712539274987462847127144189744077640228676476261706857956110016131225710829736936", "2685293884913727249342782719769425370476274662755457142371684102705302038226687338998134729995069268738686220146790", "1647249619091309285647709675906799498883958806009300700213260824629771451832955049864017875390645396212946604528228", "754593122754480025888928442595881557297702777950220449032529335609233068703200836076251711767169162941634633660620", "1443239901041469902588322124510478943849441786343308801727942359265867251576245842501513348219414475426391809150012", "693482248527763833945047067805245135498419141336840832971657691999419809358032658808373501835767830992161237234186", "1641539315300124883348197414236379868929497939927097175527482012279770686780349110347486657103947785266018530912102", "1886359948405272032509200972200487838499095546070251385922161313983540266083589930536246998849575410341928472378431", "1841087824486570090759734983506129217787984289723138374816714863438594821038334359432409500442960964469727010957731", "2783648049877443018623569585139832085196762188411395896441704433889428796673323854934098509274018694281666260348478", "842068246502904460140718585225895475249164566706242664760224521079259681615826011597922960046914842375365822692973", "224552193407090940755114545767859718589007361900450954186194025440789531883199072026901215532612008056349752935244", "1645592495618432239868909311911768518002865653755127765712790210465627041495787099950665356263237068532296384429137", "1232196598459447048990596881747769902787730350735889430256849717693319630891019347634445046202227898937347525842", "1607124419483339859473036750693754629606858739902851141462355020261677829956541093557722894996756045768626842043563", "1825130547015683886127100763198652833311427422428937399535594857470449030562018147369110567646000240405188352000066", "1253260098059000198617394388032806969408030051860639019299743509825881409042344386493354594125260341119698035360754", "2313310063202278511773999963096432237414277253635046722924919824370979351200477482011282264226592557115271218775926", "3690242115034447741199778056092045412713836082894867399777402291789210169560402065946903580883516433811651038739438", "1895095652335422862716900587159748887799770041711351510110155117470989813456199663527166466364972338333999811282448", "3166621208539017053816645408512846465774147899330325200519478409071658150595687635855823889938256850110526232684343", "314373059178644432093632996302543113228878153126316342430398718034350727910178977020957116290000036405990607933737", "113496823479191174545878161065230783576306903428410083342602573233979098936799941998113012960520391695610791593264", "940066509074417610732567108285309191585496849204882622552707079022266705474588900424519733710864909846448421018197", "2770642179196203212921709458033904810581156167065837947362520438340903832600524921620472736289320374927050691897641", "3148125307365856921220076236943357270823255862830341401171474754007349908203236707138796881242998789648599178636755", "1175341046709472362522489338167726402819594100410926721779018462738314537137883999166141316051086784032948712027268", "3203854054460875944065805492366483679958664496168359766590890045186007419884454503117189893430640011622632721585216", "3621491984012846964978361834197686586286748523675584422150148804829147574041861911105630448544276712406976794401196", "1644493435305023926289917405423117357629028860900392792041943231419993048051239170707889054306624079590843286840623", "2737843602503137612391720860686774854103313041768103085787031358814630354626269041018780715188725599103721541785108", "3201968443462315902835643877138720354162799057399142921346979837899987126841778473397915236144549194457134252764436", "2491615398271202831892801489448232880101109583178548929256518894766520724676053021595927481567541599092879808663373", "3179552290404042390780852475425821193547557174685123279930263232306586801274184386293793849214622911373207119531585", "1492659029900945326072886979073993400901359208872236270793236063648042773135091358287844893050249017399357032081352", "523576056693142426771836321312476882921697946717782038031613189075373940727534313207185637961526223123023632210136", "2325744886566957008964467912787156115837686897525826170265558425108324922666857773353841346858266199753822268463314", "1352671660017625692280532561730268556628096898494675682457306689669348682899338943278510803672505013909754628683416", "1562335657639255021723592501350328626522936311244692479295672728599646922405033741764503789560618849566968138053334", "2797290374996243420747505363609205272104310617310243568366679749347246759567530795341214080333823740128291180899326"};

        field_not_square_test<policy_type>(not_squares);
    }

    BOOST_AUTO_TEST_CASE(field_not_square_manual_test_bls12_381_fq2) {
        using policy_type = fields::fp2<fields::bls12_fq<381>>;
        using value_type = typename policy_type::value_type;
        using modulus_type = typename value_type::underlying_type::modulus_type;

        std::vector<std::array<const char *, 2>> not_squares = {{"2644779491424365053990362323469175308328385220501968906601202921724794051461333294936829096220851331693011282508706", "1095628329410830830353166338635211403093648437534182027536587161379229419099472266924661217380714483849887232235055"}, {"1060595670095001598845444634096938896472176506160299256689458582987503301382538923624741307865593029363121764824625", "1595023124864200029189929270144627139738669262616415571762570071422769942967519100103370751409214515318423626913024"}, {"3200253064910383816369671654337197735979953100517394352272786438595106725306917785735787496952960828317969448040950", "3085078474093520132908476184931753345137094056530198059821326995884190891305226784562911548702338722540359359315285"}, {"1881571994502726453996572800944680334038850122069197042201605446383494453982324776008669364154662335493861147930832", "976261351967896073701286862765679241858460050971326105624164399408405575936499988384614691417110142962212108437404"}, {"126740143328955558582409679827170200922866297553936496793502057923445813087899700330683704788421070393379646610108", "1291925794528057802827334683144111068987097111902183451869015659385900935612712168833992300932111815514234616728599"}, {"3063780080395303197054887202733465984889132056591157806434094602402247055749087768740794541322899266331831246602156", "2830113166336059260547777932379845890702341160044576060137865676727224371618036044689769823787727408704479474972265"}, {"47201536726104947891335710280370980480715658746418108209853279244275630162980142027688475544556332966379356486153", "837466417005145429498633279364654654547728203777977425419048206329180618070217817528239388823863495086504663319559"}, {"2989281872694672285720579330377855481550416564033420131417489279558327970526495530943606607068138885312974634556125", "771143243826977412058343236294780572857806993731103743524629404345048948097738185340318684274681180729757066394198"}, {"3587645388066535629598254746549493586983467647547174914489716310810483726556736140861402219814312568123653744771743", "3928615893129868012164390796216778981992456557760122895345987645141391786517494559279231645913510331780421488733255"}, {"1202310014295929107886750876130334153257853653410153569812091998151320921898540105818694155554717656753458066776941", "2401750146346014706926624689420919781757986091199824659025636710056721231705696873840386703943703048821741123829682"}};

        field_not_square_test<policy_type>(not_squares);
    }

BOOST_AUTO_TEST_SUITE_END()
